package zio
package pgcopy

import io.netty.buffer.ByteBuf
import io.netty.buffer.Unpooled
import zio.test.Assertion.*
import zio.test.TestAspect.*
import zio.test.*

import java.nio.charset.StandardCharsets.UTF_8
import java.time.LocalDate
import java.time.LocalTime
import java.time.OffsetDateTime
import java.time.ZoneOffset.UTC

import Codec.*
import Util.*
import Util.given

object CodecSpec extends ZIOSpecDefault:

  inline final def clear = Unpooled.buffer(1 * 1024)

  def spec: Spec[Environment & TestEnvironment, Any] =
    suite("codecs")(
      suite("numerical")(
        test("int2") {
          given ByteBuf = clear
          int2(-1); assertTrue(-1 == int2())
          int2(0); assertTrue(0 == int2())
          int2(1); assertTrue(1 == int2())
          int2(Short.MinValue); assertTrue(Short.MinValue == int2())
          int2(Short.MaxValue); assertTrue(Short.MaxValue == int2())
          _int2(Array(Short.MinValue, -1, 0, 1, Short.MaxValue));
          assertTrue(Array(Short.MinValue, -1, 0, 1, Short.MaxValue).sameElements(_int2()))
        },
        test("int4") {
          given ByteBuf = clear
          int4(-1); assertTrue(-1 == int4())
          int4(0); assertTrue(0 == int4())
          int4(1); assertTrue(1 == int4())
          int4(Int.MinValue); assertTrue(Int.MinValue == int4())
          int4(Int.MaxValue); assertTrue(Int.MaxValue == int4())
        },
        test("int8") {
          given ByteBuf = clear
          int8(-1); assertTrue(-1 == int8())
          int8(0); assertTrue(0 == int8())
          int8(1); assertTrue(1 == int8())
          int8(Long.MinValue); assertTrue(Long.MinValue == int8())
          int8(Long.MaxValue); assertTrue(Long.MaxValue == int8())
        },
        test("float4") {
          given ByteBuf = clear
          float4(-1); assertTrue(-1 == float4())
          float4(0); assertTrue(0 == float4())
          float4(1); assertTrue(1 == float4())
          float4(math.Pi.toFloat); assertTrue(math.Pi.toFloat == float4())
          float4(Float.MinValue); assertTrue(Float.MinValue == float4())
          float4(Float.MaxValue); assertTrue(Float.MaxValue == float4())
          float4(Float.MinPositiveValue); assertTrue(Float.MinPositiveValue == float4())
          _float4(Array(Float.MinValue, -1, 0, 1, math.Pi.toFloat, Float.MaxValue));
          assertTrue(Array(Float.MinValue, -1, 0, 1, math.Pi.toFloat, Float.MaxValue).sameElements(_float4()))
        },
        suite("float8")(
          test("-1") { given ByteBuf = clear; float8(-1d); assertTrue(-1d == float8()) },
          test("0") { given ByteBuf = clear; float8(0d); assertTrue(0d == float8()) },
          test("1") { given ByteBuf = clear; float8(1d); assertTrue(1d == float8()) },
          test("pi") { given ByteBuf = clear; float8(math.Pi); assertTrue(math.Pi == float8()) },
          test("Double.MinValue") { given ByteBuf = clear; float8(Double.MinValue); assertTrue(Double.MinValue == float8()) },
          test("Double.MaxValue") { given ByteBuf = clear; float8(Double.MaxValue); assertTrue(Double.MaxValue == float8()) },
          test("Double.MinPositiveValue") {
            given ByteBuf = clear; float8(Double.MinPositiveValue); assertTrue(Double.MinPositiveValue == float8())
          }
        ),
        suite("numeric")(
          test("-1") { given ByteBuf = clear; numeric(BigDecimal(-1)); assertTrue(-1 == numeric()) },
          test("0") { given ByteBuf = clear; numeric(0); assertTrue(0 == numeric()) },
          test("1") { given ByteBuf = clear; numeric(1); assertTrue(1 == numeric()) },
          test("pi") { given ByteBuf = clear; numeric(math.Pi); assertTrue(math.Pi == numeric()) },
          test("-3.14e-21") { given ByteBuf = clear; numeric(BigDecimal("-3.14e-21")); assertTrue(BigDecimal("-3.14e-21") == numeric()) },
          test("3.14e21") { given ByteBuf = clear; numeric(BigDecimal("3.14e21")); assertTrue(BigDecimal("3.14e21") == numeric()) },
          test("3.14e201") { given ByteBuf = clear; numeric(BigDecimal("3.14e201")); assertTrue(BigDecimal("3.14e201") == numeric()) },
          test("-3.14e21") { given ByteBuf = clear; numeric(BigDecimal("-3.14e21")); assertTrue(BigDecimal("-3.14e21") == numeric()) },
          test("3.14E38") { given ByteBuf = clear; numeric(BigDecimal("3.14E38")); assertTrue(BigDecimal("3.14E38") == numeric()) },
          test("large") {
            given ByteBuf = clear;
            val c = BigDecimal("827349823749823749283749283749287928234729847928347293847293847923847239847.984384279487"); numeric(c);
            assertTrue(c == numeric())
          },
          test("huge pos") {
            given ByteBuf = clear;
            val c = BigDecimal(

            ); numeric(c); assertTrue(c == numeric())
          },
          test("huge neg") {
            given ByteBuf = clear;
            val c = BigDecimal(

            ); numeric(c); assertTrue(c == numeric())
          },
          test("Int.MinValue") { given ByteBuf = clear; numeric(Int.MinValue); assertTrue(Int.MinValue == numeric()) },
          test("Int.MaxValue") { given ByteBuf = clear; numeric(Int.MaxValue); assertTrue(Int.MaxValue == numeric()) },
          test("Long.MinValue") { given ByteBuf = clear; numeric(Long.MinValue); assertTrue(Long.MinValue == numeric()) },
          test("Long.MaxValue") { given ByteBuf = clear; numeric(Long.MaxValue); assertTrue(Long.MaxValue == numeric()) },
          test("Float.MinValue") {
            given ByteBuf = clear; numeric(BigDecimal(Float.MinValue)); assertTrue(BigDecimal(Float.MinValue) == numeric())
          },
          test("Float.MaxValue") {
            given ByteBuf = clear; numeric(BigDecimal(Float.MaxValue)); assertTrue(BigDecimal(Float.MaxValue) == numeric())
          },
          test("Float.MinPositiveValue") {
            given ByteBuf = clear; numeric(BigDecimal(Float.MinPositiveValue)); assertTrue(BigDecimal(Float.MinPositiveValue) == numeric())
          },
          test("Double.MinValue") {
            given ByteBuf = clear; numeric(BigDecimal(Double.MinValue)); assertTrue(BigDecimal(Double.MinValue) == numeric())
          },
          test("Double.MaxValue") {
            given ByteBuf = clear; numeric(BigDecimal(Double.MaxValue)); assertTrue(BigDecimal(Double.MaxValue) == numeric())
          },
          test("Double.MinPositiveValue") {
            given ByteBuf = clear; numeric(BigDecimal(Double.MinPositiveValue));
            assertTrue(BigDecimal(Double.MinPositiveValue) == numeric())
          }
        )
      ) @@ flaky,
      suite("textual")(
        suite("text")(
          test("empty") { given ByteBuf = clear; text(""); assertTrue("" == text()) },
          test("A") { given ByteBuf = clear; text("A"); assertTrue("A" == text()) },
          test("-1.0") { given ByteBuf = clear; text("-1.0"); assertTrue("-1.0" == text()) },
          test("umlaut") { given ByteBuf = clear; text("äöüÄÖÜß@€🔥🌈"); assertTrue("äöüÄÖÜß@€🔥🌈" == text()) },
          test("chinise") { given ByteBuf = clear; text("史密斯是王明的朋友。"); assertTrue("史密斯是王明的朋友。" == text()) },
          test("_text") {
            given ByteBuf = clear; val t = Array("", "A", "-1.0", "äöüÄÖÜß@€🔥🌈", "史密斯是王明的朋友。"); _text(t);
            assertTrue(t.sameElements(_text()))
          }
        ),
        test("name") {
          given ByteBuf = clear
          name(""); assertTrue("" == name())
          name("1234567890123456789012345678901234567890123456789012345678901234567890");
          assertTrue("123456789012345678901234567890123456789012345678901234567890123" == name())
          text("1234567890123456789012345678901234567890123456789012345678901234567890");
          assertTrue("123456789012345678901234567890123456789012345678901234567890123" == name())
        },
        test("char") { given ByteBuf = clear; char('@'); assertTrue('@' == char()) }
      ) @@ flaky,
      suite("others")(
        suite("bool")(
          test("true") { given ByteBuf = clear; bool(true); assertTrue(true == bool()) },
          test("false") { given ByteBuf = clear; bool(false); assertTrue(false == bool()) },
          test("_bool") {
            given ByteBuf = clear; _bool(Array(true, true, false, false, true));
            assertTrue(Array(true, true, false, false, true).sameElements(_bool()))
          }
        ),
        suite("bytea")(
          test("empty") { given ByteBuf = clear; val bytes = Array.emptyByteArray; bytea(bytes); assertTrue(bytes.sameElements(bytea())) },
          test("0") { given ByteBuf = clear; val bytes = Array(0.toByte); bytea(bytes); assertTrue(bytes.sameElements(bytea())) },
          test("getBytes") {
            given ByteBuf = clear;
            val bytes = "lkasjdflkajsdfASDFASBASDFlkjasdöfl kjasldökfjasldkfjasldkfjalskdjflöasdkjföalskdjf".getBytes(UTF_8).nn
            bytea(bytes); assertTrue(bytes.sameElements(bytea()))
          }
        ),
        test("uuid") {
          import Util.Uuid
          import java.util.UUID
          given ByteBuf = clear
          var u = Uuid(UUID.randomUUID.nn); uuid(u); assertTrue(u == uuid())
        }
      ) @@ flaky,
      suite("datetime")(
        suite("interval")(
          test("1970") { given ByteBuf = clear; val i = Util.Interval(1970, 1, 1, 0, 0, 0); interval(i); assertTrue(i == interval()) },
          test("2023") {
            given ByteBuf = clear; val i = Util.Interval(2023, 4, 21, 14, 59, 59.099); interval(i); assertTrue(i == interval())
          },
          test("1685") {
            given ByteBuf = clear; val i = Util.Interval(1685, 3, 31, 10, 59, 59.999999); interval(i); assertTrue(i == interval())
          },
          test("-4713") {
            given ByteBuf = clear; val i = Util.Interval(-4712, -1, -17, 0, 0, 0.999999); interval(i); assertTrue(i == interval())
          },
          test("min") {
            given ByteBuf = clear; val i = Util.Interval(-178000000 + 1, -11, -30, -23, -59, -59.999999); interval(i);
            assertTrue(i == interval())
          },
          test("max") {
            given ByteBuf = clear; val i = Util.Interval(178000000 - 1, 11, 30, 23, 59, 59.999999); interval(i); assertTrue(i == interval())
          }
        ),
        suite("timestamptz")(
          test("now") {
            given ByteBuf = clear; val t = OffsetDateTime.now(UTC); timestamptz(t); assertTrue(t == timestamptz())
          },
          test("1970") {
            given ByteBuf = clear; val t = OffsetDateTime.of(LocalDate.of(1970, 1, 1), LocalTime.of(0, 0), UTC); timestamptz(t);
            assertTrue(t == timestamptz())
          },
          test("1685") {
            given ByteBuf = clear; val t = OffsetDateTime.of(LocalDate.of(1685, 3, 31), LocalTime.of(10, 59), UTC); timestamptz(t);
            assertTrue(t == timestamptz())
          },
          test("-4713") {
            given ByteBuf = clear; val t = OffsetDateTime.of(LocalDate.of(-4713, 1, 1), LocalTime.of(0, 0), UTC); timestamptz(t);
            assertTrue(t == timestamptz())
          }
        ),
        suite("date")(
          test("1685") { given ByteBuf = clear; val d = LocalDate.of(1685, 3, 31); date(d); assertTrue(d == date()) },
          test("new") { given ByteBuf = clear; val d = LocalDate.now; date(d); assertTrue(d == date()) },
          test("EPOCH") { given ByteBuf = clear; val d = LocalDate.EPOCH; date(d); assertTrue(d == date()) },
          test("-4713") { given ByteBuf = clear; val d = LocalDate.of(-4713, 1, 1); date(d); assertTrue(d == date()) },
          test("5874897") { given ByteBuf = clear; val d = LocalDate.of(5874897, 12, 31); date(d); assertTrue(d == date()) }
        )
      ) @@ flaky
    )
